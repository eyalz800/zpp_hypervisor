trigger:
- master
- dev

strategy:
  matrix:
    ubuntu-clang-7:
      VM_IMAGE: 'ubuntu-16.04'
      OPERATING_SYSTEM: 'linux'
      CLANG_VERSION: 7
      ARTIFACT_NAME: 'ubuntu-clang-7'
    ubuntu-clang-8:
      VM_IMAGE: 'ubuntu-16.04'
      OPERATING_SYSTEM: 'linux'
      COMPILER: 'clang-8'
      CLANG_VERSION: 8
      ARTIFACT_NAME: 'ubuntu-clang-8'
    windows-2019-clang-8:
      VM_IMAGE: 'windows-2019'
      OPERATING_SYSTEM: 'windows'
      COMPILER: 'clang-8'
      CLANG_VERSION: 8.0.0
      ANDROID_NDK_VERSION: r19c
      ARTIFACT_NAME: 'windows-2019-clang-8'
    vs2017-win2016-clang-8:
      VM_IMAGE: 'vs2017-win2016'
      OPERATING_SYSTEM: 'windows'
      COMPILER: 'clang-8'
      CLANG_VERSION: 8.0.0
      ANDROID_NDK_VERSION: r19c
      ARTIFACT_NAME: 'vs2017-win2016-clang-8'

pool:
  vmImage: $(VM_IMAGE)

steps:
- script: |
    sudo add-apt-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-$CLANG_VERSION main"
    sudo apt update --allow-insecure-repositories
    sudo apt install --allow-unauthenticated -y \
      git \
      make \
      clang-$CLANG_VERSION \
      clang++-$CLANG_VERSION \
      lld-$CLANG_VERSION \
      libc++-$CLANG_VERSION-dev \
      build-essential \
      libelf-dev \
      linux-headers-$(uname -r)
    sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-$CLANG_VERSION 10000
    sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-$CLANG_VERSION 10000
  condition: eq(variables['OPERATING_SYSTEM'], 'linux')
  displayName: 'linux-install'

- script: |
    echo "SUPPORTED_ARCHITECTURES := x86_64" > environment.config
    echo "SELECTED_ARCHITECTURE := x86_64" >> environment.config
    echo "BUILD_DRIVERS := linux" >> environment.config
    echo "HYPERVISOR_WAIT_FOR_DEBUGGER := 0" >> environment.config
    echo "LINUX_KERNEL := $(uname -r)" >> environment.config
  displayName: 'linux-setup-environment'
  condition: eq(variables['OPERATING_SYSTEM'], 'linux')

- script: |
    make -j
    make -j mode=release
  displayName: 'linux-build'
  condition: eq(variables['OPERATING_SYSTEM'], 'linux')

- script: |
    @echo on
    mkdir .llvm
    powershell -NoProfile -Command "Start-BitsTransfer -Source http://releases.llvm.org/$(CLANG_VERSION)/LLVM-$(CLANG_VERSION)-win64.exe -Destination .llvm/llvm.exe"
    .llvm\llvm.exe /S
    mkdir .android-ndk
    powershell -NoProfile -Command "Start-BitsTransfer -Source https://dl.google.com/android/repository/android-ndk-$(ANDROID_NDK_VERSION)-windows-x86_64.zip -Destination .android-ndk/android-ndk.zip"
    powershell -NoProfile -Command "Expand-Archive -Path .android-ndk/android-ndk.zip -Destination .android-ndk"
    git clone --branch UDK2018 https://github.com/tianocore/edk2 .edk2 2>&1
  displayName: 'windows-install'
  condition: eq(variables['OPERATING_SYSTEM'], 'windows')

- script: |
    @echo on
    set PATH=C:/Program Files/Git/usr/bin;%PATH%
    (echo SUPPORTED_ARCHITECTURES := x86_64)> environment.config
    (echo SELECTED_ARCHITECTURE := x86_64)>> environment.config
    (echo BUILD_DRIVERS := windows uefi)>> environment.config
    (echo HYPERVISOR_WAIT_FOR_DEBUGGER := 0)>> environment.config
    (echo EDK2_ROOT := ../.edk2)>> environment.config
    (echo ANDROID_NDK_ROOT := ../.android-ndk/android-ndk-$(ANDROID_NDK_VERSION))>> environment.config
    (echo LLVM_ROOT := C:/Program\ Files/LLVM)>> environment.config
  displayName: 'windows-setup-environment'
  condition: eq(variables['OPERATING_SYSTEM'], 'windows')

- script: |
    @echo on
    set PATH=C:/Program Files/Git/usr/bin;%PATH%
    .android-ndk\android-ndk-$(ANDROID_NDK_VERSION)\prebuilt\windows-x86_64\bin\make -j
    .android-ndk\android-ndk-$(ANDROID_NDK_VERSION)\prebuilt\windows-x86_64\bin\make -j mode=release
  displayName: 'windows-build'
  condition: eq(variables['OPERATING_SYSTEM'], 'windows')

- upload: out
  artifact: $(ARTIFACT_NAME)
